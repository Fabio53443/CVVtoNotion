"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const node_fetch_1 = tslib_1.__importDefault(require("node-fetch"));
const path_1 = require("path");
const fs_1 = require("fs");
const Enums = tslib_1.__importStar(require("../Enums"));
class Rest {
    username;
    #password;
    #token;
    #state;
    #baseUrl;
    #directory;
    login_timeout;
    expiration;
    debug;
    saveTempFile;
    authorized;
    user;
    #app;
    #headers;
    constructor({ state = Enums.States.Italy, app = Enums.Apps.Students, ...data } = {}) {
        this.username = data.username || "";
        this.#password = data.password || "";
        this.#token = "";
        this.#state = state;
        this.#baseUrl = `https://${Enums.Urls[this.#state]}/rest/v1`;
        this.#directory = (0, path_1.join)((0, path_1.parse)(__dirname).dir, '..');
        this.login_timeout;
        this.expiration = "";
        this.debug = data.debug || false;
        this.saveTempFile = data.saveTempFile ?? true;
        this.authorized = false;
        this.user = {
            name: undefined,
            surname: undefined,
            id: undefined,
            ident: undefined,
            type: undefined,
            school: {}
        };
        this.#app = app;
        this.#headers = {
            "Content-Type": "application/json",
            "Accept": "application/json",
            "User-Agent": `${this.#app} iOS/15.4`,
            "Z-Dev-Apikey": "Tg1NWEwNGIgIC0K",
            "Z-If-None-Match": "",
        };
    }
    /**
     * Logins to Classeviva
     * @param {string} [username] Classeviva credentials username
     * @param {string} [password] Classeviva credentials password
     * @returns {object} user object
     */
    async login(username = this.username, password = this.#password) {
        if (this.authorized)
            return this.#error("Already logged in ❌");
        if (!username || !password)
            return this.#error("Username or password not set ❌");
        if (!await this.#checkTemp() || !this.saveTempFile) {
            const userData = {
                uid: username,
                pass: password,
            };
            const response = await (0, node_fetch_1.default)(`${this.#baseUrl}/auth/login/`, {
                method: "POST",
                headers: this.#headers,
                body: JSON.stringify(userData),
            });
            const json = await response.json();
            if (json.error) {
                this.authorized = false;
                return this.#error(`An error happened: ${json.message} (${json.statusCode}) ❌`);
            }
            if (response.status !== 200)
                return this.#error(`The server returned a status code other than 200 (${response.status}) ❌`);
            this.#updateData(json);
            if (this.saveTempFile) {
                await (0, fs_1.writeFileSync)(`${this.#directory}/cvv.json`, JSON.stringify(json, null, 2));
                this.#log("Saved temp file ✅");
            }
        }
        if (!this.authorized)
            return this.#error("Failed to login ❌");
        this.#log(`Successfully logged in as "${this.user.name} ${this.user.surname}" ✅`);
        this.login_timeout = setTimeout(() => {
            this.login();
        }, 1000 * 60 * 60 * 1.5);
        return this.user;
    }
    /**
     * Logs out from Classeviva
     * @returns {boolean} true if logged out, error if already logged out
     */
    logout() {
        if (!this.authorized)
            return this.#error("Already logged out ❌");
        clearTimeout(this.login_timeout);
        this.authorized = false;
        this.#token = "";
        this.user = {};
        this.expiration = "";
        this.#log("Successfully logged out ✅");
        return true;
    }
    /**
     * Get student's cards
     * @returns {object[]} Array of objects containing the student's cards
     */
    async getCards() {
        const data = await this.#fetch({ path: "/cards" });
        if (data?.cards && data?.cards?.length > 0)
            this.#updateUser(data.cards[0]);
        return data?.cards ?? [];
    }
    /**
     * Get student's card
     * @returns {object} Object containing the student's card
     */
    async getCard() {
        const data = await this.#fetch({ path: "/card" });
        if (data?.card && Object.keys(data?.card ?? {}).length > 0)
            this.#updateUser(data.card);
        return data?.card;
    }
    /**
     * Get student's grades
     * @returns {object[]} Array of objects containing the student's grades
     */
    async getGrades() {
        const data = await this.#fetch({ path: `/grades2` });
        return data?.grades ?? [];
    }
    /**
     * Get student's absences
     * @returns {object[]} Array of objects containing the student's absences
     */
    async getAbsences() {
        const data = await this.#fetch({ path: `/absences/details` });
        return data?.events ?? [];
    }
    /**
     * Get student's agenda
     * @param {string} filter "all" | "homework" | "other", default "all", used to filter the agenda
     * @param {Date} start The start date of the agenda (defaults to today)
     * @param {Date} end  The end date of the agenda (defaults to today)
     * @returns {object[]} Array of objects containing the student's agenda
     */
    async getAgenda(filter = "all", start = new Date(), end = new Date()) {
        const filters = ["all", "homework", "other"];
        if (!filters.includes(filter))
            return this.#error("Invalid filter ❌");
        const map = {
            all: "all",
            homework: "AGHW",
            other: "AGNT",
        };
        const data = await this.#fetch({ path: `/agenda/${map[filter]}/${this.#formatDate(start)}/${this.#formatDate(end)}` });
        return data?.agenda ?? [];
    }
    /**
     * Get student's documents
     * @returns {object[]} Array of objects containing the student's documents
     */
    async getDocuments() {
        const data = await this.#fetch({ path: "/documents", method: "POST" });
        return data ?? [];
    }
    /**
     * Get student's noticeboard items
     * @returns {object[]} Array of objects containing the student's noticeboard items
     */
    async getNoticeboard() {
        const data = await this.#fetch({ path: "/noticeboard" });
        return data?.items ?? [];
    }
    /**
     * Get student's books
     * @returns {object[]} Array of objects containing the student's books
     */
    async getSchoolBooks() {
        const data = await this.#fetch({ path: "/schoolbooks" });
        return data?.schoolbooks ?? [];
    }
    /**
     * Get student's calendar
     * @returns {object[]} Array of objects containing the student's calendar
     */
    async getCalendar() {
        const data = await this.#fetch({ path: "/calendar/all" });
        return data?.calendar ?? [];
    }
    /**
     * Get student's lessons
     * @param {boolean} [today] Boolean to get today's lessons, default true
     * @param {Date} [start] If today is false, the start date of the lessons (defaults to today)
     * @param {Date} [end] If today is false, the end date of the lessons (defaults to today)
     * @returns {object[]} Array of objects containing the student's lessons
     */
    async getLessons(today = true, start = new Date(), end = new Date()) {
        const data = await this.#fetch({ path: `/lessons${today ? "/today" : `/${this.#formatDate(start)}/${this.#formatDate(end)}`}` });
        return data?.lessons ?? [];
    }
    /**
     * Get student's notes
     * @returns {object[]} Array of objects containing the student's notes
     */
    async getNotes() {
        const data = await this.#fetch({ path: "/notes/all" });
        return data ?? [];
    }
    /**
     * Get student's periods
     * @returns {object[]} Array of objects containing the student's periods
     */
    async getPeriods() {
        const data = await this.#fetch({ path: "/periods" });
        return data?.periods ?? [];
    }
    /**
     * Get student's subjects
     * @returns {object[]} Array of objects containing the student's subjects
     */
    async getSubjects() {
        const data = await this.#fetch({ path: "/subjects" });
        return data?.subjects ?? [];
    }
    /**
     * Get student's didactics items
     * @returns {object[]} Array of objects containing the student's didactics items
     */
    async getDidactics() {
        const data = await this.#fetch({ path: "/didactics" });
        return data?.didacticts ?? [];
    }
    /**
     * Get a list of the Classeviva class' functions
     * @returns {string[]} An array containing the Classeviva class' functions
     */
    getMethods() {
        return Object.getOwnPropertyNames(Object.getPrototypeOf(this)).filter(prop => prop !== "constructor");
    }
    /**
     * Get a list of the possible parents options for classeviva
     * @returns {object} An object containing all the possible parents options for classeviva
     */
    async getParentsOptions() {
        const data = await this.#fetch({ path: "/_options", method: "GET", type: "parents" });
        return data?.options ?? {};
    }
    /**
     *  Get a list of the avaible talks with teachers on classeviva
     * @returns {object[]} An array of objects containing data about the avaible talks with teachers for classeviva
     */
    async getOverallTalks() {
        const data = await this.#fetch({ path: "/overalltalks/list", method: "GET", type: "parents" });
        return data?.overallTalks ?? [];
    }
    /**
     *  Get a list of something regarding the talks with teachers
     * @param {Date} start The start date of the talks (defaults to today)
     * @param {Date} end The end date of the talks (defaults to today)
     * @returns {object[]} An array of objects containing data about the talks with teachers for classeviva
     */
    async getTalks(start = new Date(), end = new Date()) {
        const data = await this.#fetch({ path: `/talks/teachersframes/${this.#formatDate(start)}/${this.#formatDate(end)}`, method: "GET", type: "parents" });
        return data?.teachers ?? [];
    }
    /**
     *  Get auth ticket
     * @returns {object} An object containing data about the auth ticket
     */
    async getTicket() {
        if (!this.authorized)
            return this.#error("Not authorized ❌");
        const headers = Object.assign({ "Z-Auth-Token": this.#token }, this.#headers);
        const res = await (0, node_fetch_1.default)(`${this.#baseUrl}/auth/ticket`, {
            headers
        });
        const data = await res.json()
            .catch(() => this.#error("Could not parse JSON while getting ticket ❌"));
        return data ?? {};
    }
    /**
     *  Get the user avatar
     * @returns {unknown} The user avatar (not tested)
     */
    async getAvatar() {
        if (!this.authorized)
            return this.#error("Not authorized ❌");
        const headers = Object.assign({ "Z-Auth-Token": this.#token }, this.#headers);
        const res = await (0, node_fetch_1.default)(`${this.#baseUrl}/auth/avatar`, {
            headers
        });
        const data = await res.json()
            .catch(() => this.#error("Could not parse JSON while getting avatar ❌"));
        return data ?? {};
    }
    /**
     * Get an overview of the day specified or the time specified
     * @param {Date} start The start date of the overview (defaults to today)
     * @param {Date} end The end date of the overview (defaults to today)
     * @returns {object} An object containing data about the overview of a day or the time specified
     */
    async getOverview(start = new Date(), end = new Date()) {
        const data = await this.#fetch({ path: `/overview/all/${this.#formatDate(start)}/${this.#formatDate(end)}` });
        if (typeof data === "undefined")
            return undefined;
        return data;
    }
    /*/**
     * Not implemented yet 😢
     * @param {string || number} bookingId booking id of the talk
     * @param {string} message message to send
     * @returns {unknown}
     */
    /*async sendTeacherMessage(bookingId: string, message: string) {
        const data: any = await this.#fetch(`/talks/teachermessage/${bookingId}`, "POST", "parents");
        return data ?? {};
    }; */
    /**
     * Read messages from the inbox of a talk
     * @param {string || number} bookingId booking id of the talk
     * @param {string} message message to send
     * @returns {object}
     */
    async readTalkMessage(bookingId) {
        const data = await this.#fetch({ path: `/talks/teachermessage/${bookingId}`, method: "POST", type: "parents", body: JSON.stringify({ "messageRead": true }) });
        return data ?? {};
    }
    /**
     * Checks if a document is avaible
     * @param {string | number} hash The hash of the document
     * @returns {object} An object containing data about the document
     */
    async checkDocument(hash) {
        const data = await this.#fetch({ path: `/documents/check/${hash}/`, method: "POST" });
        return data?.document ?? { avaible: false };
    }
    /**
     * Book a talk with a teacher
     * @param {string | number} teacherId The id of the teacher
     * @param {string | number} talkId The id of the talk
     * @param {string | number} slot The slot of the talk
     * @param {object} opts contact options
     * @returns {object} An object containing data about the booked talk
     */
    async bookTalk(teacherId, talkId, slot, opts) {
        const data = await this.#fetch({ path: `/talks/book/${teacherId}/${talkId}/${slot}`, method: "POST", type: "parents", body: JSON.stringify(opts) });
        return data ?? {};
    }
    /**
     * Get the list of contents that's displayed in the app (should be "Classeviva extra")
     * @param {boolean} common idk, defaults to true
     * @returns {object[]} An array of objects containing data about the contents that's displayed in the app
     */
    async getContents(common = true) {
        if (!this.authorized)
            return this.#error("Not authorized ❌");
        if (!this.user.school?.code)
            return this.#error("No school code, please update using getCard() or getCards() ❌");
        const headers = Object.assign({ "Z-Auth-Token": this.#token }, this.#headers);
        const response = await (0, node_fetch_1.default)(`https://${Enums.Urls[this.#state]}/gek/api/v1/${this.user.school.code}/2021/students/contents?common=${common}`, {
            headers
        });
        const data = await response.json()
            .catch(() => this.#error("Could not parse JSON while getting content ❌"));
        return data ?? [];
    }
    /**
     * Get infos about your agreement to the terms of classeviva. If you haven't agreed yet, this response body will be empty and the function will return an empty object.
     * @returns {object} An object containing data about the agreement to the terms of classeviva
     */
    async getTermsAgreement() {
        const data = await this.#fetch({ path: "/getTermsAgreement", method: "GET", type: "users", body: undefined, json: true, id: "userIdent" });
        if (typeof data === "undefined")
            return undefined;
        return data;
    }
    /**
     * Set the agreement to the terms of classeviva third party data colletors
     * @param {boolean} ThirdParty Whether you agree to the terms of classeviva third party data colletors, defaults to true
     * @returns {object} An object with the property "msg": "ok" if the agreement was set successfully
     */
    async setTermsAgreement(ThirdParty = false) {
        const accepted = ThirdParty ? "1" : "0";
        const data = await this.#fetch({ path: "/setTermsAgreement", method: "POST", type: "users", body: JSON.stringify({ bitmask: accepted }), json: true, id: "userIdent" });
        return data ?? { msg: "NOT OK" };
    }
    /**
     * Read a notice from the school
     * @param {string} eventCode Event code of the notice
     * @param {string | number} id Id of the notice
     * @param {object} options { sign, join, text }
     * @returns {object} An object containing data about the notice
     */
    async readNotice(eventCode, id, options = {}) {
        const data = await this.#fetch({
            path: `/noticeboard/read/${eventCode}/${id}/101`, method: "POST", type: "students", body: options ? JSON.stringify(options) : "", json: true, id: "userId", customHeaders: {
                "Content-Type": "application/x-www-form-urlencoded"
            }
        });
        if (typeof data === "undefined")
            return undefined;
        return data;
    }
    /**
     * Get the document url of a notice attachment
     * @param {string} eventCode Event code of the notice
     * @param {string | number} id Id of the notice
     * @returns {string} The url of the document
     */
    async getNoticeDocumentUrl(eventCode, id) {
        if (!this.authorized)
            return this.#error("Not authorized ❌");
        const headers = Object.assign({ "Z-Auth-Token": this.#token }, this.#headers);
        const response = await (0, node_fetch_1.default)(`${this.#baseUrl}/students/${this.user.ident}/noticeboard/attach/${eventCode}/${id}/`, {
            headers
        });
        const url = response.headers.get("Location");
        return url ?? "";
    }
    /**
     * Get the status of a token
     * @param {string} token token to check, defaults to the token of the user
     * @returns {object} An object containing data about the token
     */
    async getTokenStatus(token = this.#token) {
        if (!this.authorized || !token)
            return this.#error("Not authorized ❌");
        const headers = Object.assign({ "Z-Auth-Token": token }, this.#headers);
        const response = await (0, node_fetch_1.default)(`${this.#baseUrl}/auth/status/`, {
            headers
        });
        const data = await response.json()
            .catch(() => this.#error("Could not parse JSON while getting token status ❌"));
        return data ?? {};
    }
    /**
     * Read a document
     * @param {string} hash the hash of the document
     * @returns {Buffer} The document
     */
    async readDocument(hash) {
        const data = await this.#fetch({ path: `/documents/read/${hash}/`, method: "POST", type: "students", body: undefined, json: false });
        return data ?? Buffer.from("");
    }
    async resetPassword(email) {
        if (!this.authorized)
            return this.#error("Not authorized ❌");
        const headers = Object.assign({ "Z-Auth-Token": this.#token }, {
            ...this.#headers,
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "application/json",
            "X-Requested-With": "XMLHttpRequest"
        });
        const res = await (0, node_fetch_1.default)(`${this.#getHost()}sso/app/default/sam.php?a=akRSPWRQ`, {
            method: "POST",
            body: `eml=${email}`,
            headers
        });
        const data = await res.json()
            .catch(() => this.#error("Could not parse JSON while resetting password ❌"));
        return data ?? {};
    }
    async readNote(noteType, noteId) {
        const data = await this.#fetch({ path: `/notes/${noteType}/read/${noteId}/`, method: "POST", type: "students", body: undefined });
        return data?.event;
    }
    async getTerms() {
        if (!this.authorized)
            return this.#error("Not authorized ❌");
        const headers = Object.assign({ "Z-Auth-Token": this.#token }, {
            ...this.#headers,
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "application/json",
            "X-Requested-With": "XMLHttpRequest"
        });
        const res = await (0, node_fetch_1.default)(`${this.#getHost()}auc/api/v2/getTerms`, {
            method: "GET",
            headers
        });
        const data = await res.json()
            .catch(() => this.#error("Could not parse JSON while getting terms ❌"));
        return data ?? {};
    }
    async getAucContents() {
        if (!this.authorized)
            return this.#error("Not authorized ❌");
        const headers = Object.assign({ "Z-Auth-Token": this.#token }, {
            ...this.#headers,
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "application/json",
            "X-Requested-With": "XMLHttpRequest"
        });
        const res = await (0, node_fetch_1.default)(`${this.#getHost()}auc/api/v2/contents`, {
            method: "GET",
            headers
        });
        return res.text();
    }
    async getAucContentAuths() {
        if (!this.authorized)
            return this.#error("Not authorized ❌");
        const headers = Object.assign({ "Z-Auth-Token": this.#token }, {
            ...this.#headers,
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "application/json",
            "X-Requested-With": "XMLHttpRequest"
        });
        const res = await (0, node_fetch_1.default)(`${this.#getHost()}auc/api/v2/contentAuths`, {
            method: "GET",
            headers
        });
        return res.text();
    }
    /**
     * @private Gets the host of the current url
     * @returns {string} The host of the current url
     */
    #getHost() {
        return this.#baseUrl.split('rest')[0];
    }
    /**
     * @private Updates the user object with school infos and the user type
     * @param {object} card The user card (from getCard() or getCards())
     * @return {void} Nothing
     */
    #updateUser(card) {
        const { schName, schDedication, schCity, schProv, schCode, usrType } = card;
        this.user.type = Enums.UserTypes[usrType || "S"];
        this.user.school = {
            name: schName,
            dedication: schDedication,
            city: schCity,
            province: schProv,
            code: schCode
        };
    }
    /**
     * @private Checks for temp file
     * @returns {boolean} True if there was temp file and it updated the data, false otherwise or in case of an error
     */
    async #checkTemp() {
        try {
            const temp = await (0, fs_1.readFileSync)(`${this.#directory}/cvv.json`, "utf8");
            if (!temp) {
                return false;
            }
            const json = JSON.parse(temp);
            if (new Date(json.expire) <= new Date())
                return false;
            this.#updateData(json);
            return true;
        }
        catch (e) {
            return false;
        }
    }
    /**
     * @private Updates user data
     * @param {LoginResponse} data user data to update
     * @returns {void}
     */
    #updateData(data) {
        if (!data) {
            this.logout();
            return;
        }
        if (typeof data !== "object")
            return;
        new Date(data.expire || new Date()) > new Date() ? this.authorized = true : this.authorized = false;
        this.#token = data.token || "";
        this.user = {
            name: data.firstName,
            surname: data.lastName,
            id: this.#removeLetters(data.ident || ""),
            ident: data.ident,
        };
        this.expiration = data.expire || `${new Date().getFullYear()}-${new Date().getMonth()}-${new Date().getDate()}T${new Date().getHours()}:${new Date().getMinutes()}:${new Date().getSeconds()}+01:00`;
        return;
    }
    /**
     * @private Removes letters from a string
     * @param {string} string string to remove letters from
     * @returns {string} string without letters
     */
    #removeLetters(string) {
        return string.replace(/[^0-9]/g, "");
    }
    /**
     * @private Formats date to string in format YYYYMMDD
     * @param {Date} date date to format
     * @returns {string} date in format YYYYMMDD
     */
    #formatDate(date = new Date()) {
        const validDate = date instanceof Date ? date : new Date(date);
        const year = validDate.getFullYear();
        const month = validDate.getMonth() + 1;
        const day = validDate.getDate();
      
        return `${year}${month < 10 ? "0" + month : month}${day < 10 ? "0" + day : day}`;
      }
    /**
     * @private Fetch data from the server and the specified endpoint, then returns it
     * @param {string} path api path
     * @param {string} [method] http method
     * @param {string} [type] students | parents
     * @param {string} [body] body to send
     * @param {boolean} [json] if the data should be parsed to json
     * @param {string} [id] user identifier
     * @param {object} [customHeaders] additional headers to send
     * @returns {Promise<any>} the response
     */
    async #fetch({ path = "/", method = "GET", type = "students", body = "", json = true, id = "userId", customHeaders = {} } = {}) {
        if (!this.authorized)
            return this.#error("Not logged in ❌");
        const headers = Object.assign(this.#headers, { "Z-Auth-Token": this.#token, ...customHeaders });
        const options = {
            method: method.toUpperCase(),
            headers,
        };
        if (body && method !== "GET")
            options.body = body;
        const response = await (0, node_fetch_1.default)(`${this.#baseUrl}/${type}/${id == "userId" ? this.user.id : this.user.ident}${path}`, options);
        const res = {
            status: response.status,
            data: json ? await response.json() : await response.buffer()
        };
        if (res.data?.error) {
            const { data } = res;
            return this.#error(`An error happened: ${data.message ? data.message : data.error.split('/').pop()} (${data.statusCode}) ❌`);
        }
        if (res.status !== 200)
            return this.#error(`The server returned a status different from 200 (${res.status}) ❌`);
        return res.data;
    }
    /**
     * @private Rejects the promise and logs the error
     * @param message error message
     * @returns {Promise<never>} rejected promise
     */
    #error(message) {
        this.#log(message);
        return Promise.reject(message);
    }
    /**
     * @private Logs whatever provided
     * @param  {any[]} args arguments to log
     * @returns {void} log in the console
     */
    #log(...args) {
        if (!this.debug)
            return;
        console.log(`\x1b[31m[CLASSEVIVA]\x1b[0m`, ...args);
    }
}
exports.default = Rest;
//# sourceMappingURL=Rest.js.map