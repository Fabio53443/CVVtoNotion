/// <reference types="node" />
/// <reference types="node" />
import { ClassOptions, User, AgendaFilter, TalkOptions, Overview, Card, ContentElement, TermsAgreementResponse, setTermsAgreementResponse, readOptions, TokenStatus, TicketResponse, absences, readNotice, Grade, calendarDay, resetPassword, AgendaNotes, readNote, Term } from '../typings/Rest';
declare class Rest {
    #private;
    readonly username: string;
    login_timeout: NodeJS.Timeout;
    expiration: string;
    debug: boolean;
    saveTempFile: boolean;
    authorized: boolean;
    user: User;
    constructor({ state, app, ...data }?: ClassOptions);
    /**
     * Logins to Classeviva
     * @param {string} [username] Classeviva credentials username
     * @param {string} [password] Classeviva credentials password
     * @returns {object} user object
     */
    login(username?: string, password?: string): Promise<void | User>;
    /**
     * Logs out from Classeviva
     * @returns {boolean} true if logged out, error if already logged out
     */
    logout(): true | Promise<never>;
    /**
     * Get student's cards
     * @returns {object[]} Array of objects containing the student's cards
     */
    getCards(): Promise<Card[]>;
    /**
     * Get student's card
     * @returns {object} Object containing the student's card
     */
    getCard(): Promise<Card | undefined>;
    /**
     * Get student's grades
     * @returns {object[]} Array of objects containing the student's grades
     */
    getGrades(): Promise<Grade[]>;
    /**
     * Get student's absences
     * @returns {object[]} Array of objects containing the student's absences
     */
    getAbsences(): Promise<absences[]>;
    /**
     * Get student's agenda
     * @param {string} filter "all" | "homework" | "other", default "all", used to filter the agenda
     * @param {Date} start The start date of the agenda (defaults to today)
     * @param {Date} end  The end date of the agenda (defaults to today)
     * @returns {object[]} Array of objects containing the student's agenda
     */
    getAgenda(filter?: AgendaFilter, start?: Date, end?: Date): Promise<any>;
    /**
     * Get student's documents
     * @returns {object[]} Array of objects containing the student's documents
     */
    getDocuments(): Promise<any>;
    /**
     * Get student's noticeboard items
     * @returns {object[]} Array of objects containing the student's noticeboard items
     */
    getNoticeboard(): Promise<any>;
    /**
     * Get student's books
     * @returns {object[]} Array of objects containing the student's books
     */
    getSchoolBooks(): Promise<any>;
    /**
     * Get student's calendar
     * @returns {object[]} Array of objects containing the student's calendar
     */
    getCalendar(): Promise<calendarDay[]>;
    /**
     * Get student's lessons
     * @param {boolean} [today] Boolean to get today's lessons, default true
     * @param {Date} [start] If today is false, the start date of the lessons (defaults to today)
     * @param {Date} [end] If today is false, the end date of the lessons (defaults to today)
     * @returns {object[]} Array of objects containing the student's lessons
     */
    getLessons(today?: boolean, start?: Date, end?: Date): Promise<any>;
    /**
     * Get student's notes
     * @returns {object[]} Array of objects containing the student's notes
     */
    getNotes(): Promise<any>;
    /**
     * Get student's periods
     * @returns {object[]} Array of objects containing the student's periods
     */
    getPeriods(): Promise<any>;
    /**
     * Get student's subjects
     * @returns {object[]} Array of objects containing the student's subjects
     */
    getSubjects(): Promise<any>;
    /**
     * Get student's didactics items
     * @returns {object[]} Array of objects containing the student's didactics items
     */
    getDidactics(): Promise<any>;
    /**
     * Get a list of the Classeviva class' functions
     * @returns {string[]} An array containing the Classeviva class' functions
     */
    getMethods(): string[];
    /**
     * Get a list of the possible parents options for classeviva
     * @returns {object} An object containing all the possible parents options for classeviva
     */
    getParentsOptions(): Promise<any>;
    /**
     *  Get a list of the avaible talks with teachers on classeviva
     * @returns {object[]} An array of objects containing data about the avaible talks with teachers for classeviva
     */
    getOverallTalks(): Promise<any>;
    /**
     *  Get a list of something regarding the talks with teachers
     * @param {Date} start The start date of the talks (defaults to today)
     * @param {Date} end The end date of the talks (defaults to today)
     * @returns {object[]} An array of objects containing data about the talks with teachers for classeviva
     */
    getTalks(start?: Date, end?: Date): Promise<any>;
    /**
     *  Get auth ticket
     * @returns {object} An object containing data about the auth ticket
     */
    getTicket(): Promise<TicketResponse | void>;
    /**
     *  Get the user avatar
     * @returns {unknown} The user avatar (not tested)
     */
    getAvatar(): Promise<any>;
    /**
     * Get an overview of the day specified or the time specified
     * @param {Date} start The start date of the overview (defaults to today)
     * @param {Date} end The end date of the overview (defaults to today)
     * @returns {object} An object containing data about the overview of a day or the time specified
     */
    getOverview(start?: Date, end?: Date): Promise<Overview | undefined>;
    /**
     * Read messages from the inbox of a talk
     * @param {string || number} bookingId booking id of the talk
     * @param {string} message message to send
     * @returns {object}
     */
    readTalkMessage(bookingId: string): Promise<any>;
    /**
     * Checks if a document is avaible
     * @param {string | number} hash The hash of the document
     * @returns {object} An object containing data about the document
     */
    checkDocument(hash: string | number): Promise<{
        avaible: boolean;
    }>;
    /**
     * Book a talk with a teacher
     * @param {string | number} teacherId The id of the teacher
     * @param {string | number} talkId The id of the talk
     * @param {string | number} slot The slot of the talk
     * @param {object} opts contact options
     * @returns {object} An object containing data about the booked talk
     */
    bookTalk(teacherId: string | number, talkId: string | number, slot: string | number, opts: TalkOptions): Promise<any>;
    /**
     * Get the list of contents that's displayed in the app (should be "Classeviva extra")
     * @param {boolean} common idk, defaults to true
     * @returns {object[]} An array of objects containing data about the contents that's displayed in the app
     */
    getContents(common?: boolean): Promise<ContentElement[] | void>;
    /**
     * Get infos about your agreement to the terms of classeviva. If you haven't agreed yet, this response body will be empty and the function will return an empty object.
     * @returns {object} An object containing data about the agreement to the terms of classeviva
     */
    getTermsAgreement(): Promise<TermsAgreementResponse | undefined>;
    /**
     * Set the agreement to the terms of classeviva third party data colletors
     * @param {boolean} ThirdParty Whether you agree to the terms of classeviva third party data colletors, defaults to true
     * @returns {object} An object with the property "msg": "ok" if the agreement was set successfully
     */
    setTermsAgreement(ThirdParty?: boolean): Promise<setTermsAgreementResponse>;
    /**
     * Read a notice from the school
     * @param {string} eventCode Event code of the notice
     * @param {string | number} id Id of the notice
     * @param {object} options { sign, join, text }
     * @returns {object} An object containing data about the notice
     */
    readNotice(eventCode: string, id: string | number, options?: readOptions): Promise<readNotice | undefined>;
    /**
     * Get the document url of a notice attachment
     * @param {string} eventCode Event code of the notice
     * @param {string | number} id Id of the notice
     * @returns {string} The url of the document
     */
    getNoticeDocumentUrl(eventCode: string, id: string | number): Promise<string | void>;
    /**
     * Get the status of a token
     * @param {string} token token to check, defaults to the token of the user
     * @returns {object} An object containing data about the token
     */
    getTokenStatus(token?: string): Promise<TokenStatus | void>;
    /**
     * Read a document
     * @param {string} hash the hash of the document
     * @returns {Buffer} The document
     */
    readDocument(hash: string): Promise<Buffer>;
    resetPassword(email: string): Promise<resetPassword | void>;
    readNote(noteType: keyof AgendaNotes, noteId: string | number): Promise<readNote>;
    getTerms(): Promise<Term[]>;
    getAucContents(): Promise<string>;
    getAucContentAuths(): Promise<string>;
}
export default Rest;
//# sourceMappingURL=Rest.d.ts.map