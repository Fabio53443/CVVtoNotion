import { ClassOptions, ClassUser, prodotto } from "../typings/Web";
declare class Web {
    #private;
    authorized: boolean;
    user: ClassUser;
    /**
     * Web api class constructor
     * @param {ClassOptions} [loginData] Login data
     * @param {string} [loginData.cid] Customer ID (???)
     * @param {string} [loginData.uid] User ID (username)
     * @param {string} [loginData.pwd] User Password
     * @param {string} [loginData.pin] PIN (???)
     * @param {string} [loginData.target] Target (???)
     */
    constructor(loginData?: ClassOptions);
    login(data?: ClassOptions): Promise<boolean>;
    logout(): boolean;
    getAgenda(start?: Date, end?: Date, nascondiAuleVirtuale?: boolean): Promise<any>;
    getPortfolio(): Promise<any>;
    exportXmlAgenda(start?: Date, end?: Date, formato?: "xml" | "xls"): Promise<any>;
    getUnreadMessages(): Promise<number | undefined>;
    getUsername(): Promise<{
        name?: string;
        username?: string;
    }>;
    getDocumentionList(prodotto?: prodotto | "", cerca?: string): Promise<any>;
    getDocumentationUrl(prodotto: prodotto, id: number): Promise<string>;
    getAvatar(): Promise<any>;
    getAcGooBApiKey(): Promise<string>;
    getRubrica(): Promise<any>;
    getMessages(): Promise<any>;
    getBacheca(nascondiNonAttive?: boolean): Promise<any>;
    readComunications(ids: string[]): Promise<boolean>;
    getDocumentUrl(params: string, doctype?: number): Promise<any>;
    getAccountInfo(): Promise<any>;
    getMethods(): string[];
    setSessionId(token: string): void;
    msToUnix(ms: Date | number): number;
}
export default Web;
//# sourceMappingURL=Web.d.ts.map